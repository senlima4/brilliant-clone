generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  CUSTOMER
  CREATOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(CUSTOMER)
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CourseStatus {
  PUBLIC
  LINK
  DRAFT
}

enum UnitStatus {
  PUBLIC
  DRAFT
}

model Course {
  id          String   @id @default(cuid())
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String?
  image       String?
  status      CourseStatus     @default(DRAFT)
  topics      Topic[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Topic {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  units       Unit[]
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
}

model Unit {
  id          String      @id @default(cuid())
  title       String
  status      UnitStatus  @default(DRAFT)
  description String?
  structure   String?
  topic       Topic       @relation(fields: [topicId], references: [id])
  topicId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}
